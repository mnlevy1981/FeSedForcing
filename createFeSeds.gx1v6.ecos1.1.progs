; $ module load idl
; $ idl
; IDL> .run createFeSeds.gx1v6.ecos1.1.progs
; IDL> create_reduceOxic_fesedfiles_bgcpercsedALT,'../JAMES_8p4z_last20yr_annual_mean.nc','../JAMES_8p4z_last20yr_annual_mean.nc','fesedflux_gx1v6_CESM2_ecos1.1_2024.nc','fesedfluxRed_gx1v6_CESM2_ecos1.1_2024.nc','../percentSed_stdgrid_gx1v6.nc',0.005639,0.1,0.0005343

;***************************************************************************

pro extract_var_file, filename, varname, outvar

ncdf_get, filename, varname, outvar
outvar = outvar[varname, 'value']

end

;***************************************************************************

pro put_var_file, filename, varname, invar

print, "Writing ", varname, " to ", filename, "..."
fid = ncdf_create(filename, /CLOBBER)
shape = size(invar)
d=indgen(shape[0],/LONG)
if (shape[0] EQ 3) then dimnames = ['x', 'y', 'z'] else dimnames = ['x', 'y']
for n=0,shape[0]-1 do begin
d[n] = ncdf_dimdef(fid, dimnames[n], shape[n+1])
endfor

; Assumes 3D var... but that's okay because they are all 3D
var_id = ncdf_vardef(fid,varname, d, /FLOAT)

ncdf_control, fid, /ENDEF
ncdf_varput, fid, varname, invar
ncdf_close, fid
print, "Complete!"
print, "max val: ", max(invar)

end

;***************************************************************************

pro create_reduceOxic_fesedfiles_bgcpercsedALT, infile, infile2, outfile,outfile2, percsedfile,xfactor,minval,minoxic

;

print, "xfactor = ", xfactor
print, "minval = ", minval
print, "minoxic = ", minoxic

popx=320
popy=384
popz=60

extract_var_file,infile,'KMT',popkmt

; get sinking fluxes  mmolC/m2/s
; (Modify Western Pacific and Southern Ocean per Keith M's email)
extract_var_file,infile2,'POC_FLUX_IN',data
; WPac (25S-0,140-235E, 0-6N,0-20S x 10.0 0-504m)
data(138:248,179:209,0:31) = data(138:248,179:209,0:31) * 5.0
data(160:248,114:178,0:31) = data(160:248,114:178,0:31) * 2.5
; Southern Ocean > 56S
data(*,0:43,0:31) = data(*,0:43,0:31) * 2.5

if max(data) GT 1.0e30 then data(where (data GT 1.0e30)) = 0.0
; convert flux to gC/m2/yr
data=data * (365.0 * 864.0 * 12.011 * 0.001)
fpoc=data
px=0


; compute mean horizontal current speed

fesed=fltarr(popx,popy,popz)
fesed(*,*,*) = 0.0
fesedRed = fesed

; get data from file 1
extract_var_file,infile,'UVEL',data1
    data1 (where (data1 GT 1.0e30)) = 0.0

uvel=data1


extract_var_file,infile,'VVEL',data1
    data1 (where (data1 GT 1.0e30)) = 0.0

vvel=data1


; compute absolute value of current speed

meanvel = fltarr(popx,popy)
meanvel(*,*) = 0.0
numvel = meanvel
vel3d = fltarr(popx,popy,popz)
vel3d(*,*,*) = 0.0


for z=0,popz-2 do begin
for x=0,popx-1 do begin
for y=0,popy-1 do begin

velocity = ABS(uvel(x,y,z)) + ABS(vvel(x,y,z))


if (popkmt(x,y) NE 0) AND (popkmt(x,y) GT z) AND (velocity GT 0.0) then begin

vel3d(x,y,z) = velocity

endif

endfor
endfor
endfor





; impose a minimum %sed in land adjacent margin slope cells
; create mask of land adjacent cells

landadj = fltarr(popx,popy,popz)
landadj(*,*,*) = 0.0


extract_var_file,percsedfile,'PERCENTSED',percsed
for x=0,popx-1 do begin
for y=0,popy-2 do begin
for z=0,59 do begin

if (popkmt(x,y) NE 0) AND (popkmt(x,y) GT z) then begin


; impose a minimal % sed for all land adjacent grid boxes
for tx = x-1, x+1 do begin
for ty = y-2, y+2 do begin
py=ty
px=tx

if tx EQ -1 then px=popx-1
if tx EQ popx then px=0
if ty LE -1 then py=0
if ty GE popy then py=popy-1


; land adjacent?
if (popkmt(px,py) EQ 0) OR (popkmt(px,py) LE z) then begin

landadj(x,y,z) = 1.0

; impose minimum % sed for land adjacent cells

if (percsed(x,y,z) LT minval) then begin
        percsed(x,y,z) = minval
endif

endif


endfor
endfor


endif else begin
; (0,0,0) is a land cell, this is fill value
; [needed because I want to mask out Caspian Sea]
percsed(x,y,z) = percsed(0,0,0)

endelse

endfor
endfor
endfor

; re-scale vertically to ensure each column percsed sums to 1.0
sumperc=fltarr(popx,popy)
sumperc(*,*)=0.0

for x=0,popx-1 do begin
for y=0,popy-1 do begin

for z=0,59 do begin
sumperc(x,y) = sumperc(x,y) + percsed(x,y,z)
endfor

if sumperc(x,y) NE 1.0 then percsed(x,y,*) = percsed(x,y,*) * 1.0/sumperc(x,y)

endfor
endfor

percsedfile_out = 'my_percsed.nc'
put_var_file,percsedfile_out,'PERCENTSED',percsed



;
extract_var_file,infile,'KVMIX',kvmix

kvmix(where (kvmix GT 1.0e30))=0.0


extract_var_file,infile,'TEMP',temperat
temperat(where (temperat GT 1.0e30))=0.0

Tfunc=0.0


fesed(*,*,*) = 0.0
fesedRed(*,*,*) = 0.0


; compute fesed input from reducing and oxic sediments
local_speed = vel3d
Kd = 0.0*kvmix


for x=0,popx-1 do begin
for y=0,popy-1 do begin
for z=0,popz-1 do begin

if (percsed(x,y,z) GT 0.0) and (popkmt(x,y) GT z) then begin
; increase iron source as function current speed and vertical mixing
fesed(x,y,z) = (minoxic * percsed(x,y,z))

; speed 1.0 - 40 cm/s  
if local_speed(x,y,z) LT 0.2 then local_speed(x,y,z) = 0.2
if (z LE 40) AND (local_speed(x,y,z) LT 2.0) then local_speed(x,y,z) = 2.0
if local_speed(x,y,z) GT 20.0 then local_speed(x,y,z) = 20.0
scaleup = local_speed(x,y,z)

if (z GT 1) then Kd(x,y,z) = kvmix(x,y,z-1)
if (Kd(x,y,z) GE 10.0) then Kd(x,y,z) = 10.0
if (Kd(x,y,z) GT scaleup) then scaleup = Kd(x,y,z)
fesed(x,y,z) = fesed(x,y,z) * scaleup


sinkpoc = 0.0
sinkpoc = fpoc(x,y,z)


if (z LT 40) and (sinkpoc LT 10.0) then sinkpoc = 10.0


Tfunc = 1.5^(((temperat(x,y,z) + 273.15) - (32.0 + 273.15)) / 10.0)

fesedRed(x,y,z) = sinkpoc * xfactor * percsed(x,y,z) * scaleup * Tfunc

endif else begin
local_speed(x,y,z) = 0
endelse

endfor
endfor
endfor
 
put_var_file,'speed.nc','SPEED',local_speed
put_var_file,'Kd.nc','KD',Kd

print,max(fesed) * 1.0e4
print,max(fesedRed) * 1.0e4


; convert to model input file units

fesed=fesed / ((365.0 * 864.0) * 1.1574e-6)
put_var_file,outfile,'FESEDFLUXIN',fesed


fesedRed=fesedRed / ((365.0 * 864.0) * 1.1574e-6)
put_var_file,outfile2,'FESEDFLUXIN',fesedRed


close,/all
end


;******************************************************************************


